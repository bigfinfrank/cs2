echoln "[networking.cfg] Start of networking.cfg";



echoln "[networking.cfg] {1} Configuring client-side networking";
sv_unify_random_seed "true";                                    // Should we securely share seeds between the client and server?
sv_usercmd_custom_random_seed "false";                          // When enabled server will populate an additional random seed independent of the client
net_client_steamdatagram_enable_override "1";                   // 0: Use connect method requested by GC.  >0: Always use SDR if possible.  <0: Always use direct UDP if possible
cq_netgraph_problem_show_auto "true";                           // Automatically activate/deactivate cq_netgraph when network conditions degrade
mm_dedicated_search_maxping "25";                               // Longest preferred ping to dedicated servers for games
cl_phys_sleep_enable "false";                                   // Enable sleeping for dynamic physics bodies.
cl_lagcompensation "true";                                      // Perform server side lag compensation of weapon firing events.
cl_predictweapons "true";                                       // Perform client side prediction of weapon effects.
cl_predict "true";                                              // Perform client side prediction.
cl_timeout "60";                                                // After this many seconds without receiving a packet from the server, the client will disconnect itself
cl_resend "0.5";                                                // Delay in seconds before the client will resend the 'connect' attempt
rate "1000000";                                                 // Min bytes/sec the host can receive data
// CS2 cl_interp_ratio "1";                                     // Sets the interpolation amount (final amount is cl_interp_ratio / cl_updaterate).
// CS2 cl_interp "0";                                           // Sets the interpolation amount (bounded on low side by server interp ratio settings).
// CS2 sv_forcepreload "1";                                      // Force preload the entire map on join (?)
// CS2 net_steamcnx_enabled "2";                                 // Use steam connections on listen server as a fallback, 2 forces use of steam connections instead of raw UDP.
// CS2 cl_resend_timeout "30";                                   // Total time allowed for the client to resend the 'connect' attempt
// CS2 cl_connection_trouble_show "1";                           // Show connection trouble HUD warnings
// rate 20480   = 160 kbps
// rate 24576   = 192 kbps
// rate 49152   = 384 kbps
// rate 65536   = 512 kbps
// rate 98304   = 768 kbps (minimum, "Extremely Restricted")
// rate 196608  = 1.5 mbps
// rate 262144  = 2.0 mbps
// rate 327680  = 2.5 mbps
// rate 393216  = 3.0 mbps
// rate 524288  = 4.0 mbps
// rate 786432  = 6.0 mbps (default, "Unrestricted")
// rate 1000000 = 7.8 mbps (maximum)


echoln "[networking.cfg] {2} Configuring server-side networking (and tickrate)";
sv_hibernate_postgame_delay "inf";                              // # of seconds to wait after final client leaves before hibernating.
sv_hibernate_when_empty "false";                                // Puts the server into extremely low CPU usage mode when no clients connected
sv_phys_sleep_enable "false";                                   // Enable sleeping for dynamic physics bodies.
sv_minrate "1000000";                                           // Min bandwidth rate allowed on server, 0 == unlimited
sv_maxrate "1000000";                                           // Max bandwidth rate allowed on server, 0 == unlimited
sv_lan "false";                                                 // 1: Server is a lan server ( no heartbeat, no authentication, no non-class C addresses )
engine_no_focus_sleep "0";                                      // This isn't officially networking but the server tickrate seems to never be higher than the host framerate which is affected by this when tabbed out.
// CS2 BROKEN IN PUBLIC LT RELEASE: fin_128tick;                // Run the alias that configures networking for 64 tick servers
// All preconfigured options: fin_16tick; fin_32tick; fin_64tick; fin_128tick; fin_256tick; fin_512tick;


// CS2 echoln "[networking.cfg] [1.2] Configuring the netgraph";
// CS2 net_graphproportionalfont "1";                            // Scales netgraph font to your res
// CS2 net_graphholdsvframerate "1";                             // Colors based on server performance
// CS2 net_graphshowsvframerate "0";                             // Draw the server framerate graph.
// CS2 net_graphshowlatency "1";                                 // Shows your ping
// CS2 net_graphshowinterp "1";                                  // Shows connection interpolation
// CS2 net_graphmsecs "1000";                                    // Bases the graphs on the last sec
// CS2 net_graphheight "0";                                      // Makes the netgraph appear on screen
// CS2 net_graphsolid "1";                                       // 0: The net graph is not solid 1: Draws height ticks as full vertical rectangles
// CS2 net_graphtext "1";                                        // Draw text fields
// CS2 net_graphpos "2";                                         // Centers the graph left-to-right
// CS2 net_graphipc "1";                                         // Show IPCs on netgraph panel
// CS2 net_graph "1";                                            // Turn on the net graph overlay 0: Off 1: On 2: show in/out 3: show graphs | If disallowed, it'll default to the next highest value



echoln "[networking.cfg] End of networking.cfg";
